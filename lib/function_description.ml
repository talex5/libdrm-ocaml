open Ctypes

(* This Types_generated module is an instantiation of the Types
   functor defined in the type_description.ml file. It's generated by
   a C program that Dune creates and runs behind the scenes. *)
open Types_generated

module Functions (F : FOREIGN) = struct
  open F

  let drmGetDevices2 = foreign "drmGetDevices2" (flags32 @-> ptr_opt (ptr Types_generated.Device.t) @-> int @-> returning int)
  let drmFreeDevices = foreign "drmFreeDevices" (ptr (ptr Types_generated.Device.t) @-> int @-> returning void)

  let drmIsKMS = foreign "drmIsKMS" (fd @-> returning bool)
  let drmIsMaster = foreign "drmIsMaster" (fd @-> returning bool)
  let drmGetVersion = foreign "drmGetVersion" (fd @-> returning (ptr_opt DrmVersion.t))
  let drmFreeVersion = foreign "drmFreeVersion" (ptr DrmVersion.t @-> returning void)
  let drmSetClientCap = foreign "drmSetClientCap" (fd @-> Types_generated.Client_cap.t @-> uint64_t @-> returning int)
  let drmPrimeHandleToFD = foreign "drmPrimeHandleToFD" (fd @-> buffer_id @-> flags32 @-> ptr fd @-> returning int)
  let drmPrimeFDToHandle = foreign "drmPrimeFDToHandle" (fd @-> fd @-> ptr buffer_id @-> returning int)
  let drmCloseBufferHandle = foreign "drmCloseBufferHandle" (fd @-> buffer_id @-> returning int)
  let drmIoctl = foreign "drmIoctl" (fd @-> ulong @-> ptr void @-> returning int)

  (* KMS *)

  let drmModeGetResources = foreign "drmModeGetResources" (fd @-> returning (ptr_opt DrmModeRes.t))
  let drmModeFreeResources = foreign "drmModeFreeResources" (ptr DrmModeRes.t @-> returning void)

  let drmModeGetCrtc = foreign "drmModeGetCrtc" (fd @-> crtc_id @-> returning (ptr_opt DrmModeCrtc.t))
  let drmModeFreeCrtc = foreign "drmModeFreeCrtc" (ptr DrmModeCrtc.t @-> returning void)

  let drmModeGetConnector = foreign "drmModeGetConnector" (fd @-> connector_id @-> returning (ptr_opt DrmModeConnector.t))
  let drmModeGetConnectorCurrent = foreign "drmModeGetConnectorCurrent" (fd @-> connector_id @-> returning (ptr_opt DrmModeConnector.t))
  let drmModeFreeConnector = foreign "drmModeFreeConnector" (ptr DrmModeConnector.t @-> returning void)

  let drmModeGetConnectorTypeName = foreign "drmModeGetConnectorTypeName" (DrmModeConnectorType.t @-> returning (ptr_opt (const char)))

  let drmModeGetEncoder = foreign "drmModeGetEncoder" (fd @-> encoder_id @-> returning (ptr_opt DrmModeEncoder.t))
  let drmModeFreeEncoder = foreign "drmModeFreeEncoder" (ptr DrmModeEncoder.t @-> returning void)

  let drmModeGetPlaneResources = foreign "drmModeGetPlaneResources" (fd @-> returning (ptr_opt DrmModePlaneRes.t))
  let drmModeFreePlaneResources = foreign "drmModeFreePlaneResources" (ptr DrmModePlaneRes.t @-> returning void)

  let drmModeGetPlane = foreign "drmModeGetPlane" (fd @-> plane_id @-> returning (ptr_opt DrmModePlane.t))
  let drmModeFreePlane = foreign "drmModeFreePlane" (ptr DrmModePlane.t @-> returning void)

  let drmModeObjectGetProperties = foreign "drmModeObjectGetProperties" (fd @-> object_id @-> uint32_t @-> returning (ptr_opt DrmModeObjectProperties.t))
  let drmModeFreeObjectProperties = foreign "drmModeFreeObjectProperties" (ptr DrmModeObjectProperties.t @-> returning void)

  let drmModeGetProperty = foreign "drmModeGetProperty" (fd @-> property_id @-> returning (ptr_opt DrmModeProperty.t))
  let drmModeFreeProperty = foreign "drmModeFreeProperty" (ptr DrmModeProperty.t @-> returning void)

  let drmModeGetPropertyType = foreign "drmModeGetPropertyType" (ptr DrmModeProperty.t @-> returning uint32_t)

  let drmModeGetPropertyBlob = foreign "drmModeGetPropertyBlob" (fd @-> blob_id @-> returning (ptr_opt DrmModePropertyBlob.t))
  let drmModeFreePropertyBlob = foreign "drmModeFreePropertyBlob" (ptr DrmModePropertyBlob.t @-> returning void)

  let drmGetCap = foreign "drmGetCap" (fd @-> uint64_t @-> ptr int_uint64 @-> returning int)

  let drmModeCreateDumbBuffer = foreign "drmModeCreateDumbBuffer"
      (fd @-> dim @-> dim @-> int_uint32 @-> flags32 @-> ptr buffer_id @-> ptr pitch @-> ptr size @-> returning int)

  let drmModeDestroyDumbBuffer = foreign "drmModeDestroyDumbBuffer" (fd @-> buffer_id @-> returning int)

  let drmModeAddFB2WithModifiers = foreign "drmModeAddFB2WithModifiers"
      (fd @-> dim @-> dim @-> drm_format @->
       ptr buffer_id @-> ptr pitch @-> ptr offset @-> ptr drm_modifier @->
       ptr fb_id @-> flags32 @-> returning int)

  let drmModeDirtyFB = foreign "drmModeDirtyFB" (fd @-> fb_id @-> ptr Drm_clip_rect.t @-> int_uint32 @-> returning int)

  let drmModeRmFB = foreign "drmModeRmFB" (fd @-> fb_id @-> returning int)
  let drmModeCloseFB = foreign "drmModeCloseFB" (fd @-> fb_id @-> returning int)

  let drmModeGetFB2 = foreign "drmModeGetFB2" (fd @-> fb_id @-> returning (ptr_opt DrmModeFB2.t))
  let drmModeFreeFB2 = foreign "drmModeFreeFB2" (ptr DrmModeFB2.t @-> returning void)

  let drmModeSetCrtc = foreign "drmModeSetCrtc"
      (fd @-> crtc_id @-> fb_id_opt @-> dim @-> dim @-> ptr connector_id @-> int @-> ptr_opt DrmModeModeInfo.t @-> returning int)

  let drmModePageFlip = foreign "drmModePageFlip"
      (fd @-> crtc_id @-> fb_id @-> flags32 @-> ptr void @-> returning int)

  let drmModeMapDumbBuffer = foreign "drmModeMapDumbBuffer" (fd @-> buffer_id @-> ptr uint64_t @-> returning int)

  let drmModeSetCursor = foreign "drmModeSetCursor" (fd @-> crtc_id @-> buffer_id_opt @-> dim @-> dim @-> returning int)
  let drmModeSetCursor2 = foreign "drmModeSetCursor2" (fd @-> crtc_id @-> buffer_id_opt @-> dim @-> dim @-> dim @-> dim @-> returning int)
  let drmModeMoveCursor = foreign "drmModeMoveCursor" (fd @-> crtc_id @-> dim @-> dim @-> returning int)

  let drmModeFormatModifierBlobIterNext = foreign "drmModeFormatModifierBlobIterNext"
      (ptr (const DrmModePropertyBlob.t) @-> ptr DrmModeFormatModifierIterator.t @-> returning bool)

  (* Atomic KMS *)

  let drmModeAtomicAlloc = foreign "drmModeAtomicAlloc" (void @-> returning AtomicReqPtr.t_opt)
  let drmModeAtomicFree = foreign "drmModeAtomicFree" (AtomicReqPtr.t @-> returning void)
  let drmModeAtomicAddProperty = foreign "drmModeAtomicAddProperty" (AtomicReqPtr.t @-> object_id @-> property_id @-> uint64_t @-> returning int)
  let drmModeAtomicCommit = foreign "drmModeAtomicCommit" (fd @-> AtomicReqPtr.t @-> flags32 @-> ptr void @-> returning int)
end
